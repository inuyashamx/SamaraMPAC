#!/usr/bin/env python3
"""
Script espec√≠fico para probar OpenAI con contextos largos
"""

from samara.smart_conversational_agent import SmartConversationalAgent

def test_openai_contexto_muy_largo():
    """Prueba con contexto muy largo que active autom√°ticamente OpenAI"""
    print("üöÄ PRUEBA: Contexto muy largo para activar OpenAI autom√°ticamente")
    
    agent = SmartConversationalAgent(profile_path="profiles/dev.json")
    
    # Crear un contexto muy largo que supere los l√≠mites de Ollama
    contexto_base = """
    Necesito un an√°lisis completo del proyecto sacs3. Este es un sistema muy complejo con m√∫ltiples capas:
    
    ARQUITECTURA GENERAL:
    - Frontend: Polymer 3.0 con componentes modulares
    - Backend: Node.js con Express y APIs REST
    - Base de datos: PostgreSQL con Redis para cache
    - Autenticaci√≥n: Firebase Authentication + JWT
    - Deploy: Docker containers en AWS
    
    M√ìDULOS PRINCIPALES:
    1. Autenticaci√≥n y autorizaci√≥n
    2. Gesti√≥n de usuarios y perfiles
    3. Sistema de notificaciones
    4. Procesamiento de archivos
    5. APIs de integraci√≥n externa
    6. Sistema de reportes y analytics
    7. Gesti√≥n de configuraciones
    8. Logs y monitoreo
    9. Sistema de backup autom√°tico
    10. Gesti√≥n de permisos granulares
    
    DEPENDENCIAS T√âCNICAS:
    - Librer√≠as frontend: Polymer, LitElement, Firebase SDK
    - Librer√≠as backend: Express, Sequelize, Passport, Multer
    - Testing: Jest, Cypress, Mocha
    - Build tools: Webpack, Babel, ESLint
    - CI/CD: GitHub Actions, Docker, AWS CodeDeploy
    
    PATRONES DE DISE√ëO IMPLEMENTADOS:
    - MVC en el backend
    - Component pattern en el frontend
    - Repository pattern para acceso a datos
    - Factory pattern para creaci√≥n de objetos
    - Observer pattern para eventos
    - Singleton para configuraciones globales
    
    CONSIDERACIONES DE SEGURIDAD:
    - Validaci√≥n de entrada en todos los endpoints
    - Sanitizaci√≥n de datos antes de almacenar
    - HTTPS obligatorio en producci√≥n
    - Rate limiting en APIs p√∫blicas
    - Logs de auditor√≠a para acciones cr√≠ticas
    - Encriptaci√≥n de datos sensibles
    
    PERFORMANCE Y ESCALABILIDAD:
    - Cache Redis para consultas frecuentes
    - CDN para assets est√°ticos
    - Database indexing optimizado
    - Lazy loading en componentes frontend
    - Connection pooling en base de datos
    - Load balancer para m√∫ltiples instancias
    """
    
    # Repetir el contexto varias veces para hacer el prompt muy largo
    mensaje_muy_largo = contexto_base * 3
    
    mensaje_final = f"""
    {mensaje_muy_largo}
    
    Con toda esta informaci√≥n de contexto, necesito que analices espec√≠ficamente el m√≥dulo de login
    y me proporciones recomendaciones t√©cnicas detalladas para optimizar:
    1. La seguridad del proceso de autenticaci√≥n
    2. La experiencia de usuario en el login
    3. La integraci√≥n con el resto del sistema
    4. Las posibles mejoras de performance
    5. Estrategias de testing para este m√≥dulo cr√≠tico
    
    Por favor, proporciona un an√°lisis t√©cnico profundo basado en los datos reales de Weaviate.
    """
    
    print(f"üìè Tama√±o del mensaje: {len(mensaje_final):,} caracteres")
    print(f"üìè Tokens estimados: ~{len(mensaje_final)//4:,}")
    print("="*60)
    
    respuesta = agent.interactuar("test_openai", mensaje_final)
    
    print("="*60)
    print("üìã RESPUESTA:")
    print(respuesta)
    
    # Mostrar estad√≠sticas detalladas
    print("\nüìä ESTAD√çSTICAS:")
    stats = agent.model_router.get_stats()
    print(f"Total requests: {stats['total_requests']}")
    print(f"Por proveedor: {stats['by_provider']}")
    print(f"Por contexto: {stats.get('by_context_size', {})}")

def test_forzar_openai():
    """Prueba forzando espec√≠ficamente OpenAI"""
    print("\nüéØ PRUEBA: Forzar uso espec√≠fico de OpenAI")
    
    agent = SmartConversationalAgent(profile_path="profiles/dev.json")
    
    # Cambiar a OpenAI
    respuesta_cambio = agent.interactuar("test_openai", "usar modelo gpt")
    print(f"Cambio a OpenAI: {respuesta_cambio}")
    
    # Ahora hacer una consulta que use OpenAI
    consulta = """
    Analiza el m√≥dulo login del proyecto sacs3 con OpenAI. 
    Necesito un an√°lisis t√©cnico detallado que incluya:
    - Arquitectura del m√≥dulo
    - Patrones de seguridad implementados
    - Puntos de mejora espec√≠ficos
    - Recomendaciones de optimizaci√≥n
    
    Esta consulta deber√≠a usar OpenAI ya que lo configur√© espec√≠ficamente.
    """
    
    respuesta = agent.interactuar("test_openai", consulta)
    
    print("\nüìã RESPUESTA CON OPENAI:")
    print(respuesta)
    
    # Estad√≠sticas
    stats = agent.model_router.get_stats()
    print(f"\nüìä √öltimo proveedor usado: {stats['by_provider']}")

if __name__ == "__main__":
    print("üß™ PRUEBAS ESPEC√çFICAS DE OPENAI")
    print("="*70)
    
    # Primero forzar OpenAI espec√≠ficamente
    test_forzar_openai()
    
    # Luego probar con contexto muy largo
    test_openai_contexto_muy_largo()
    
    print("\n‚úÖ Pruebas de OpenAI completadas") 