#!/usr/bin/env python3
"""
Demo del Meta-Agente Orquestador de Samara
Muestra todas las capacidades del sistema inteligente de modelos
"""

import os
import sys
from samara.smart_conversational_agent import SmartConversationalAgent
from samara.model_router_agent import ModelProvider, TaskType

def print_header(title):
    """Imprime un header bonito"""
    print("\n" + "="*60)
    print(f"üöÄ {title}")
    print("="*60)

def print_section(title):
    """Imprime una secci√≥n"""
    print(f"\nüìã {title}")
    print("-" * 40)

def demo_basic_conversation():
    """Demo de conversaci√≥n b√°sica"""
    print_header("DEMO: Conversaci√≥n B√°sica con Enrutamiento Inteligente")
    
    # Inicializar agente en modo dev
    agente = SmartConversationalAgent("profiles/dev.json")
    player_id = "DemoUser"
    
    # Ejemplos de diferentes tipos de consultas
    consultas = [
        "Hola, ¬øc√≥mo est√°s?",
        "Expl√≠came qu√© es React",
        "Tengo un error en mi c√≥digo Python, ¬øme ayudas?",
        "Migra este archivo de JavaScript a TypeScript",
        "Analiza la arquitectura de mi proyecto",
        "¬øCu√°les son las mejores pr√°cticas para APIs REST?"
    ]
    
    for i, consulta in enumerate(consultas, 1):
        print(f"\n{i}. Usuario: {consulta}")
        respuesta = agente.interactuar(player_id, consulta)
        print(f"   Samara: {respuesta[:200]}...")
        
        # Mostrar qu√© modelo se us√≥
        print(f"   üìä Modelo detectado autom√°ticamente")

def demo_model_selection():
    """Demo de selecci√≥n manual de modelos"""
    print_header("DEMO: Selecci√≥n Manual de Modelos")
    
    agente = SmartConversationalAgent("profiles/dev.json")
    player_id = "DemoUser"
    
    # Mostrar proveedores disponibles
    print("ü§ñ Proveedores disponibles:")
    available = agente.model_router.get_available_providers()
    for provider in available:
        print(f"   ‚Ä¢ {provider}")
    
    # Forzar uso de Ollama
    print("\nüîß Configurando para usar solo Ollama...")
    respuesta = agente.interactuar(player_id, "usar modelo ollama")
    print(f"Samara: {respuesta}")
    
    # Hacer una consulta
    print("\nüí¨ Consulta con Ollama forzado:")
    respuesta = agente.interactuar(player_id, "Expl√≠came los patrones de dise√±o")
    print(f"Samara: {respuesta[:200]}...")

def demo_dev_commands():
    """Demo de comandos de desarrollo"""
    print_header("DEMO: Comandos de Desarrollo Especializados")
    
    agente = SmartConversationalAgent("profiles/dev.json")
    player_id = "DemoUser"
    
    # Comando de migraci√≥n
    print_section("Comando de Migraci√≥n")
    respuesta = agente.interactuar(
        player_id, 
        "Migra el proyecto en /ruta/mi-proyecto de Polymer a React"
    )
    print(f"Samara: {respuesta[:300]}...")
    
    # Comando de an√°lisis
    print_section("Comando de An√°lisis")
    respuesta = agente.interactuar(
        player_id, 
        "Analiza el proyecto en /ruta/mi-proyecto"
    )
    print(f"Samara: {respuesta[:300]}...")
    
    # Estad√≠sticas
    print_section("Estad√≠sticas del Sistema")
    respuesta = agente.interactuar(player_id, "stats")
    print(f"Samara: {respuesta}")

def demo_memory_intelligence():
    """Demo de memoria inteligente"""
    print_header("DEMO: Sistema de Memoria Inteligente")
    
    agente = SmartConversationalAgent("profiles/dev.json")
    player_id = "DemoUser"
    
    # Conversaci√≥n que deber√≠a guardarse en memoria
    print_section("Informaci√≥n T√©cnica (se guarda en memoria)")
    respuesta = agente.interactuar(
        player_id, 
        "Estoy trabajando en un proyecto de e-commerce con Node.js, Express y MongoDB. Uso JWT para autenticaci√≥n."
    )
    print(f"Samara: {respuesta[:200]}...")
    
    # Conversaci√≥n simple que NO deber√≠a guardarse
    print_section("Saludo Simple (NO se guarda en memoria)")
    respuesta = agente.interactuar(player_id, "Hola")
    print(f"Samara: {respuesta[:200]}...")
    
    # Consulta que deber√≠a usar la memoria
    print_section("Consulta que Usa Memoria Previa")
    respuesta = agente.interactuar(
        player_id, 
        "¬øC√≥mo puedo mejorar la seguridad de mi API?"
    )
    print(f"Samara: {respuesta[:200]}...")

def demo_task_detection():
    """Demo de detecci√≥n autom√°tica de tareas"""
    print_header("DEMO: Detecci√≥n Autom√°tica de Tipos de Tarea")
    
    from samara.model_router_agent import ModelRouterAgent
    
    router = ModelRouterAgent()
    
    # Ejemplos de diferentes tipos de tareas
    ejemplos = [
        ("Migra el proyecto completo de 300k l√≠neas", TaskType.MIGRACION_COMPLEJA),
        ("Convierte este archivo a TypeScript", TaskType.MIGRACION_SENCILLA),
        ("Analiza la estructura del proyecto", TaskType.ANALISIS_CODIGO),
        ("Tengo un bug en mi c√≥digo", TaskType.DEBUGGING),
        ("Documenta esta funci√≥n", TaskType.DOCUMENTACION),
        ("¬øC√≥mo est√°s?", TaskType.CONSULTA_SIMPLE),
        ("Dise√±a la arquitectura del sistema", TaskType.ARQUITECTURA)
    ]
    
    for prompt, expected_type in ejemplos:
        detected = router._detect_task_type(prompt, "dev")
        status = "‚úÖ" if detected == expected_type else "‚ùå"
        print(f"{status} '{prompt}' ‚Üí {detected.value}")

def demo_fallback_system():
    """Demo del sistema de fallback"""
    print_header("DEMO: Sistema de Fallback")
    
    from samara.model_router_agent import ModelRouterAgent, ModelProvider
    
    router = ModelRouterAgent()
    
    print("üîß Simulando falla de proveedor principal...")
    
    # Simular que Claude no est√° disponible
    original_claude_key = router.model_config[ModelProvider.CLAUDE]["api_key"]
    router.model_config[ModelProvider.CLAUDE]["api_key"] = None
    
    print("‚ùå Claude deshabilitado temporalmente")
    print("üîÑ El sistema deber√≠a usar fallback autom√°ticamente...")
    
    # Hacer una consulta que normalmente usar√≠a Claude
    result = router.route_and_query(
        "Migra este proyecto complejo de 300k l√≠neas",
        TaskType.MIGRACION_COMPLEJA
    )
    
    if result["success"]:
        provider_used = result.get("provider", "unknown")
        used_fallback = result.get("used_fallback", False)
        
        if used_fallback:
            original = result.get("original_provider", "unknown")
            print(f"‚úÖ Fallback exitoso: {original} ‚Üí {provider_used}")
        else:
            print(f"‚úÖ Us√≥ directamente: {provider_used}")
    else:
        print(f"‚ùå Error: {result.get('error')}")
    
    # Restaurar configuraci√≥n
    router.model_config[ModelProvider.CLAUDE]["api_key"] = original_claude_key

def demo_statistics():
    """Demo de estad√≠sticas completas"""
    print_header("DEMO: Sistema de Estad√≠sticas")
    
    agente = SmartConversationalAgent("profiles/dev.json")
    player_id = "DemoUser"
    
    # Hacer varias consultas para generar estad√≠sticas
    consultas = [
        "Hola",
        "Migra este archivo",
        "Analiza el c√≥digo",
        "Tengo un error",
        "stats"
    ]
    
    for consulta in consultas[:-1]:  # Todas excepto 'stats'
        agente.interactuar(player_id, consulta)
    
    # Mostrar estad√≠sticas
    print_section("Estad√≠sticas Generadas")
    respuesta = agente.interactuar(player_id, "stats")
    print(respuesta)

def main():
    """Funci√≥n principal del demo"""
    print("üéØ DEMO COMPLETO DEL META-AGENTE ORQUESTADOR DE SAMARA")
    print("=" * 60)
    print("Este demo muestra todas las capacidades del sistema:")
    print("‚Ä¢ Enrutamiento inteligente de modelos")
    print("‚Ä¢ Detecci√≥n autom√°tica de tipos de tarea")
    print("‚Ä¢ Sistema de fallback robusto")
    print("‚Ä¢ Memoria inteligente selectiva")
    print("‚Ä¢ Comandos especializados de desarrollo")
    print("‚Ä¢ Estad√≠sticas completas")
    
    # Verificar dependencias
    print("\nüîç Verificando dependencias...")
    
    try:
        # Verificar si Ollama est√° disponible
        import requests
        response = requests.get("http://localhost:11434/api/tags", timeout=2)
        if response.status_code == 200:
            print("‚úÖ Ollama disponible")
        else:
            print("‚ùå Ollama no disponible")
    except:
        print("‚ùå Ollama no disponible")
    
    # Verificar API keys
    api_keys = ["CLAUDE_API_KEY", "OPENAI_API_KEY", "GEMINI_API_KEY", "PERPLEXITY_API_KEY"]
    for key in api_keys:
        if os.getenv(key):
            print(f"‚úÖ {key} configurada")
        else:
            print(f"‚ùå {key} no configurada")
    
    print("\n" + "="*60)
    
    # Ejecutar demos
    try:
        demo_task_detection()
        demo_basic_conversation()
        demo_model_selection()
        demo_memory_intelligence()
        demo_dev_commands()
        demo_fallback_system()
        demo_statistics()
        
        print_header("DEMO COMPLETADO")
        print("üéâ Todas las funcionalidades han sido demostradas")
        print("üí° Para usar el sistema completo, ejecuta: python samara_chat.py dev")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Demo interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante el demo: {e}")
        print("üí° Aseg√∫rate de tener todas las dependencias instaladas")

if __name__ == "__main__":
    main() 